# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥—É–ª—è main.py
from src.utils.areas import AreasHH, AreasSJ
from src.utils.constants import PATH_VAK_DIR_HH, PATH_ARE_HH, PATH_VAK_DIR_SJ, PATH_ARE_SJ, URL_AREAS_HH, URL_AREAS_SJ
from src.utils.vacancies import VacHH, VacSJ, VacPrint


def loading_regions_hh(url: str = URL_AREAS_HH, path_vak_dir_hh: str = PATH_VAK_DIR_HH,
                       path_are_hh: str = PATH_ARE_HH) -> None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ—á–Ω–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤ —Å —Å–µ—Ä–≤–∏—Å–∞ hh.ru.
    :param url: URL —Ä–µ–≥–∏–æ–Ω–æ–≤, str.
    :param path_vak_dir_hh: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞, str.
    :param path_are_hh: –ü–æ–ª–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, str.
    :return: Json-—Ñ–∞–π–ª —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏.
    """
    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ AreasHH, –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–≥–∏–æ–Ω "–†–æ—Å—Å–∏—è".
    area_hh = AreasHH(url=url, path_vak_dir_hh=path_vak_dir_hh, path_are_hh=path_are_hh)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ json-—Ñ–∞–π–ª.
    area_hh.request_to_api()


def loading_regions_sj(url: str = URL_AREAS_SJ, path_vak_dir_sj: str = PATH_VAK_DIR_SJ,
                       path_are_sj: str = PATH_ARE_SJ) -> None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ—á–Ω–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤ —Å —Å–µ—Ä–≤–∏—Å–∞ superjob.ru.
    :param url: URL —Ä–µ–≥–∏–æ–Ω–æ–≤, str.
    :param path_vak_dir_sj: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞, str.
    :param path_are_sj: –ü–æ–ª–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, str.
    :return: Json-—Ñ–∞–π–ª —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–º–∏ –ø—É–Ω–∫—Ç–∞–º–∏.
    """
    # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ AreasSJ, –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–≥–∏–æ–Ω "–†–æ—Å—Å–∏—è".
    area_sj = AreasSJ(url=url, path_vak_dir_sj=path_vak_dir_sj, path_are_sj=path_are_sj)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ json-—Ñ–∞–π–ª.
    area_sj.request_to_api()


def program_info() -> str:
    """
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    :return: –ò–º—è, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ [Enter], str.
    """
    return input('\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–º–æ–∂–µ—Ç –í–∞–º –∏–∑—É—á–∏—Ç—å –∏–º–µ—é—â–∏–µ—Å—è –≤–∞–∫–∞–Ω—Å–∏–∏,\n'
                 '–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏,\n'
                 '—Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–∏—Å–∞—Ö HeadHunter (hh.ru) –∏ SuperJob (superjob.ru).\n\n'
                 '–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç? ').strip()


def user_name(name) -> str:
    """
     –í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param name: –ü–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :return: –í—ã–≤–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ–≥–æ –∏–º–µ–Ω–∏, str.
    """
    # –í—ã–≤–æ–¥ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    match name:
        # –ï—Å–ª–∏ name == ""
        case '':
            name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            print(f'–•–æ—Ä–æ—à–æ, –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å –í–∞—Å {name}. üëå\n')
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è –≤ name, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
        case name:
            print(f'–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {name}. ü§ù\n')
    return name


def exit_program(name) -> None:
    """
    –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    :return: –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    print(f'\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {name}! üëã')
    raise SystemExit('–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n')


def service_menu_selection() -> str:
    """
    –í–≤–æ–¥ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞.
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é, str.
    """
    return input(f'\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n'
                 f'–î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ:\n'
                 f'   ‚úÖ HeadHunter (hh.ru)........ - 1\n'
                 f'   ‚úÖ SuperJob (superjob.ru).... - 2\n'
                 f'   ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã - 0.\n\n'
                 f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ')


def service_selection(name: str, num_vak: str) -> int:
    """
    –í—ã–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :param num_vak: –ù–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –º–µ–Ω—é, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, str.
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (int) –∏–ª–∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    """

    all_ok = False
    while not all_ok:
        try:
            match int(num_vak):
                # HeadHunter (hh.ru)
                case 1:
                    print(f'\n{name}, –í—ã –≤—ã–±—Ä–∞–ª–∏ HeadHunter (hh.ru). üëå\n')
                # SuperJob (superjob.ru)
                case 2:
                    print(f'\n{name}, –í—ã –≤—ã–±—Ä–∞–ª–∏ SuperJob (superjob.ru). üëå\n')
                # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.
                case 0:
                    exit_program(name)  # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        except ValueError:
            num_vak = error_input(f'\n‚ùó{name}, –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: ')
        else:
            # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            return int(num_vak)


def error_input(value: str) -> str:
    """
    –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏
    :param value: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :return:
    """
    return input(value)


def area_vak_input() -> str:
    return input(
        f'\n–î–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –≤–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏\n'
        f'–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π "–≥.", "—Å.", "—Ö." –∏ —Ç.–¥., –Ω–∞–ø—Ä–∏–º–µ—Ä:\n'
        f'–ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É.\n'
        f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞/–Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞: ').strip().lower()


def num_area_input() -> str:
    """
    –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ id
    :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, str
    """
    return input(f'\n–ú—ã –Ω–µ –Ω–∞—à–ª–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–π –í–∞–º–∏ —Ä–µ–≥–∏–æ–Ω/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, –≤ –∏–º–µ—é—â–µ–π—Å—è –±–∞–∑–µ.\n'
                 f'–ú–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, –∏–º–µ—é—â–∏–µ—Å—è –≤ –†–æ—Å—Å–∏–∏.\n'
                 f'–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥:\n'
                 f'   ‚úÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç - 1\n'
                 f'   ‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –†–æ—Å—Å–∏–∏............ - 2\n'
                 f'   ‚ùå –ó–∞–≤–µ—Ä–∏—à—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã............. - 0\n\n'
                 f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ')


def choosing_region(service: str, name: str, area_id_country: int) -> int:
    """
    –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π.
    :param service: –°—Ç—Ä–æ–∫–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∞—è –Ω–∞ –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞: "hh" - HeadHunter, "sj" - SuperJob, str.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :param area_id_country: id —Å—Ç—Ä–∞–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–†–æ—Å—Å–∏—è), int.
    :return: –í—ã–≤–æ–¥–∏—Ç id —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π, int.
    """
    all_ok = False
    while not all_ok:
        # –í–≤–æ–¥–∏–º —Ä–µ–≥–∏–æ–Ω/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
        area_vak = area_vak_input()
        # –ò—â–µ–º id –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ
        area_id = search_area_id(area_vak, service, name)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Ä–µ–≥–∏–æ–Ω/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç
        if area_id == area_id_country:
            # –í—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–æ–≤ –º–µ–Ω—é
            all_ok_area = False
            while not all_ok_area:
                # –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
                num_area = num_area_input()
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—É–Ω–∫—Ç–æ–º –º–µ–Ω—é
                all_ok_area, all_ok = selection_menu_sections_id(num_area, name)
        else:
            all_ok = True
    return area_id


def search_area_id(area_vak: str, service: str, name: str) -> int:
    """
    –ü–æ–∏—Å–∫ id —Ä–µ–≥–∏–æ–Ω–∞/–Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ.
    :param area_vak: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞/–Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, str.
    :param service: –°—Ç—Ä–æ–∫–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∞—è –Ω–∞ –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞: "hh" - HeadHunter, "sj" - SuperJob, str.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id, –µ—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ id –†–æ—Å—Å–∏–∏, int.
    """
    try:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω HeadHunter
        if service == 'hh':
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ AreasHH —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–µ–≥–∏–æ–Ω–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
            area_hh = AreasHH(area=area_vak)
            # –ü–æ–ª—É—á–∞–µ–º id —Ä–µ–≥–∏–æ–Ω–∞/–Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
            return area_hh.extract_area_id()
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω SuperJob
        elif service == 'sj':
            # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ AreasSJ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–µ–≥–∏–æ–Ω–∞, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
            area_sj = AreasSJ(area=area_vak)
            # –ü–æ–ª—É—á–∞–µ–º id —Ä–µ–≥–∏–æ–Ω–∞/–Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
            return area_sj.extract_area_id()
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
        else:
            print('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∏—â–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ.')
            exit_program(name)
    except ValueError:
        raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–∏—Å–µ.')


def selection_menu_sections_id(num_area: str, name: str) -> tuple:
    """
    –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –¥–ª—è –ø–æ–∏—Å–∫–∞ id —Ä–µ–≥–∏–æ–Ω–∞/–Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.
    :param num_area: –ù–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é, str.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :return: –§–ª–∞–≥–∏ –≤ –∫–æ—Ä—Ç–µ–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–∏–∫–ª–æ–º while, tuple(bool, bool).
    """
    try:
        match int(num_area):
            # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞
            case 1:
                print(f'\n{name}, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç.\n')
                return True, False
            # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–æ–≤
            case 2:
                print(f'\n{name}, –º—ã –ø–æ–¥–±–µ—Ä—ë–º –¥–ª—è –í–∞—Å –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏.\n')
                return True, True
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã
            case 0:
                exit_program(name)  # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    except ValueError:
        print('–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n')
        return False, False


def name_vak_word(name: str) -> str:
    """
    –í–≤–æ–¥ –Ω–∞–∑—ã–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ (–∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞)
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏, str.
    """
    return input(f'\n{name}, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –±—É–¥–µ–º –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π.\n'
                 f'–ù–∞–ø—Ä–∏–º–µ—Ä: –≤–æ–¥–∏—Ç–µ–ª—å, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, python, java –∏ —Ç.–¥.\n\n'
                 f'–î–æ–ª–∂–Ω–æ—Å—Ç—å: ').lower()


def show_only_with_salary(name: str) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –∏–ª–∏ –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –≤–∞–∫–∞–Ω—Å–∏–∏.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :return: –§–ª–∞–≥ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π (True) –∏–ª–∏ –≤—Å–µ (False), bool.
    """
    only_with_salary = False  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π
    all_ok = False
    while not all_ok:
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –≤–∞–∫–∞–Ω—Å–∏–π (—Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –∏–ª–∏ –±–µ–∑ –Ω–µ—ë)
        salary_vak = salary_vak_input()
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        only_with_salary, all_ok = all_ok_salary(salary_vak, name)
    return only_with_salary


def salary_vak_input() -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –≤—Å–µ—Ö –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π.
    :return: –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    """
    return input('\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n'
                 '   ‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∑–∞—Ä–ø–ª–∞—Ç—ã - 1\n'
                 '   ‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –≤–∞–∫–∞–Ω—Å–∏–∏.............. - 2\n'
                 '   ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã................... - 0\n\n'
                 '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ')


def all_ok_salary(salary_vak: str, name: str) -> tuple:
    """
    –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–π —Ç–æ–ª—å–∫–æ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –∏–ª–∏ –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è.
    :param salary_vak: –í–∞—Ä–∏–∞–Ω—Ç—ã –≤–∞–∫–∞–Ω—Å–∏–π (—Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –∏–ª–∏ –±–µ–∑ –Ω–µ—ë), str.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :return: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ñ–ª–∞–≥–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π / –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏—é, tuple(bool,bool)
    """
    try:
        match int(salary_vak):
            # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å api —Ç–æ–ª—å–∫–æ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π.
            case 1:
                print(f'\nOK, {name}.\n')
                return True, True
            # –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Å api –ª—é–±—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π, –≤ —Ç.—á. –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã.
            case 2:
                print(f'\nOK, {name}.\n')
                return False, True
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.
            case 0:
                exit_program(name)  # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    except ValueError:
        print('–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n')
        return False, False


def looking_salary(only_with_salary: bool) -> int:
    """
    –í—ã–≤–æ–¥–∏—Ç —Ä–∞–∑–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.
    :param only_with_salary: –§–ª–∞–≥ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π (True) –∏–ª–∏ –≤—Å–µ (False), bool.
    :return: –†–∞–∑–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã, int.
    """
    salary = 0  # –†–∞–∑–º–µ—Ä –∏—Å–∫–æ–º–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
    if only_with_salary:
        all_ok = False
        while not all_ok:
            # –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã
            salary = salary_input()
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
            salary, all_ok = all_ok_salary_input(salary)
    return salary


def salary_input() -> str:
    """
    –í–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã.
    :return: –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã, str.
    """
    return input('\n–£–∫–∞–∂–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã (–≤ —Ä—É–±–ª—è—Ö): ')


def all_ok_salary_input(salary: str) -> tuple:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã.
    :param salary: –†–∞–∑–º–µ—Ä –æ–∂–∏–¥–∞–µ–º–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã, str.
    :return: –†–∞–∑–º–µ—Ä –æ–∂–∏–¥–∞–µ–º–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Ü–∏–∫–ª–∞.
    """
    try:
        # –†–∞–∑–º–µ—Ä –æ–∂–∏–¥–∞–µ–º–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã.
        salary = int(salary)
        if salary <= 0:
            print(f'–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.')
            return 0, False
        return salary, True
    except ValueError:
        print(f'–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.')
        return 0, False


def sort_method_input() -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.
    :return: –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    """
    return input('\n–ö–∞–∫ –Ω–∞–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏?\n'
                 '   ‚úÖ –ü–æ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)  - 1\n'
                 '   ‚úÖ –ü–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é).. - 2\n'
                 '   ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã........ - 0\n\n'
                 '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ')


def sort_method_int(sort_method: str, name: str) -> tuple:
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: 1 - –ø–æ —Ä–∞–∑–º–µ—Ä—É –∑–∞—Ä–ø–ª–∞—Ç—ã, 2 - –ø–æ –¥–∞—Ç–∞–º.
    :param sort_method: –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, str.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :return: –ö–æ–¥ (–Ω–æ–º–µ—Ä) –º–µ—Ç–æ–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, tuple (int, bool).
    """
    try:
        match int(sort_method):
            # –ú–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ (–æ—Ç –±–æ–ª—å—à–µ–π –∫ –º–µ–Ω—å—à–µ–π), –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞.
            case 1:
                return 1, True
            # –ú–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞—Ç–∞–º (–æ—Ç —Ä–∞–Ω–Ω–∏—Ö –∫ –ø–æ–∑–¥–Ω–∏–º), –≤—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞.
            case 2:
                return 2, True
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.
            case 0:
                exit_program(name)
    except ValueError:
        print('–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n')
        return 1, False


def choose_sort_method(only_with_salary: bool, name: str) -> int:
    """
    –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: 1 - –ø–æ —Ä–∞–∑–º–µ—Ä—É –∑–∞—Ä–ø–ª–∞—Ç—ã, 2 - –ø–æ –¥–∞—Ç–∞–º.
    :param only_with_salary: –§–ª–∞–≥ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π (True) –∏–ª–∏ –≤—Å–µ (False), bool.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :return: –¶–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥, int.
    """
    sort_method = 1
    if only_with_salary:
        all_ok = False
        while not all_ok:
            # –í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            sort_method = sort_method_input()
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            sort_method, all_ok = sort_method_int(sort_method, name)
    return sort_method


def get_job_info(service: str, name: str, name_vak: str, area_id: int, only_with_salary: bool, salary: int,
                 sort_method: int) -> tuple:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–ª–∞—Å—Å–æ–≤ VakHH –∏ VakSJ.
    :param service: –°—Ç—Ä–æ–∫–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∞—è –Ω–∞ –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞: "hh" - HeadHunter, "sj" - SuperJob, str.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :param name_vak: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏, str.
    :param area_id: ID —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π, int.
    :param only_with_salary: –§–ª–∞–≥ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π (True) –∏–ª–∏ –≤—Å–µ (False) –≤–∞–∫–∞–Ω—Å–∏–∏, bool.
    :param salary: –†–∞–∑–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã, int.
    :param sort_method: –¶–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ –¥–∞—Ç–∞–º –∏–ª–∏ —Ä–∞–∑–º–µ—Ä—É –∑–∞—Ä–ø–ª–∞—Ç—ã), int.
    :return: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ json-—Ñ–∞–π–ª–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª-–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –∏ —ç–∫–∑. –∫–ª–∞—Å—Å–∞ VacPrint, tuple(int, object).
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∫–ª–∞—Å—Å–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    try:
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω HeadHunter
        if service == 'hh':
            # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ VacHH - –≤–∞–∫–∞–Ω—Å–∏–∏ —Å hh.ru.
            if only_with_salary or salary != 0:
                prof_hh = VacHH(position=name_vak, area=area_id, only_with_salary=only_with_salary, salary=salary)
                prof_print = VacPrint(sort_method=sort_method)
            else:
                prof_hh = VacHH(position=name_vak, area=area_id)
                prof_print = VacPrint()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
            # —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö –≤ json-—Ñ–∞–π–ª—ã.
            prof_hh.vacancies_all()

            # –†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏.
            return prof_hh.size_dict, prof_print

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω SuperJob
        elif service == 'sj':
            # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ VacSJ - –≤–∞–∫–∞–Ω—Å–∏–∏ —Å superjob.ru.
            if only_with_salary or salary != 0:
                prof_sj = VacSJ(position=name_vak, area=area_id, only_with_salary=only_with_salary, salary=salary)
                prof_print = VacPrint(sort_method=sort_method)
            else:
                prof_sj = VacSJ(position=name_vak, area=area_id)
                prof_print = VacPrint()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
            # —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö –≤ json-—Ñ–∞–π–ª—ã.
            prof_sj.vacancies_all()

            # –†–∞–∑–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏.
            return prof_sj.size_dict, prof_print

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
        else:
            print('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∏—â–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ.')
            exit_program(name)
    except ValueError:
        raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–∏—Å–µ.')


def reselect_position() -> str:
    """
    –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã).
    :return: –î–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, str.
    """
    return input('\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥:\n'
                 '   ‚úÖ –í–≤–µ—Å—Ç–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ - 1\n'
                 '   ‚ùå –ó–∞–≤–µ—Ä–∏—à—å —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã........... - 0\n\n'
                 '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ')


def print_vacancies(service: str, count_vak: str, size_dict_vak: int, prof_print: object, one_each: int = 1) -> bool:
    """
    –í—ã–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —ç–∫—Ä–∞–Ω.
    :param service: –°—Ç—Ä–æ–∫–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∞—è –Ω–∞ –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞: "hh" - HeadHunter, "sj" - SuperJob, str.
    :param count_vak: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π, –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, str.
    :param size_dict_vak: –ù–∞–π–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π, int.
    :param prof_print: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –≤—ã–≤–æ–¥–∞ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª, object.
    :param one_each: –í—ã–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–π: 1 - –ø–æ –æ–¥–Ω–æ–π, –¥—Ä—É–≥–æ–µ - –≤—Å–µ —Å—Ä–∞–∑—É, int.
    :return: –§–ª–∞–≥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ü–∏–∫–ª–∞, bool.
    """

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not count_vak.isdigit() or int(count_vak) > size_dict_vak:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Å–ª—É—á–∞–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (–≤—Å–µ).
        count_vak = size_dict_vak
        print(f'\n–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, '
              f'–ø–æ—ç—Ç–æ–º—É –º—ã –ø–æ–∫–∞–∂–µ–º –í–∞–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ({count_vak} —à—Ç.).\n')

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        prof_print.vacancies_print(count_vak, service, one_each)
        return True

    else:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π, –∑–∞–¥–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –¥–ª—è –≤—ã–≤–æ–¥–∞.
        count_vak = int(count_vak)
        print(f'\n–ù–∏–∂–µ –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–∞–∫–∞–Ω—Å–∏–∏, '
              f'–∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–∞—à–ª–∏ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É ({count_vak} —à—Ç.).\n')

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        prof_print.vacancies_print(count_vak, service, one_each)
        return True


def displaying_jobs_screen(service: str, name: str, name_vak: str, area_id: int, only_with_salary: bool, salary: int,
                           sort_method: int) -> None:
    """
    –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö –Ω–∞ —ç–∫—Ä–∞–Ω.
    :param service: –°—Ç—Ä–æ–∫–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∞—è –Ω–∞ –≤—ã–±–æ—Ä —Å–µ—Ä–≤–∏—Å–∞: "hh" - HeadHunter, "sj" - SuperJob, str.
    :param name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, str.
    :param name_vak: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏, str.
    :param area_id: ID —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π, int.
    :param only_with_salary: –§–ª–∞–≥ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π (True) –∏–ª–∏ –≤—Å–µ (False) –≤–∞–∫–∞–Ω—Å–∏–∏, bool.
    :param salary: –†–∞–∑–º–µ—Ä –∂–µ–ª–∞–µ–º–æ–π –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã, int.
    :param sort_method: –¶–µ–ª–æ–µ —á–∏—Å–ª–æ ‚Äî –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ –¥–∞—Ç–∞–º –∏–ª–∏ —Ä–∞–∑–º–µ—Ä—É –∑–∞—Ä–ø–ª–∞—Ç—ã), int.
    :return: –í—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç–∫—Ä–∞–Ω.
    """
    all_ok = False
    while not all_ok:
        # –ù–∞–π–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
        size_dict_vak, prof_print = get_job_info(service, name, name_vak, area_id, only_with_salary, salary,
                                                 sort_method)
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        if size_dict_vak == 0:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            all_ok_position = False
            while not all_ok_position:
                # –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã).
                commands_prg = reselect_position()
                try:
                    match int(commands_prg):
                        # –í–≤–æ–¥ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ.
                        case 1:
                            name_vak = input(f'\n{name}, –≤–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: ').lower()
                            all_ok_position = True
                        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.
                        case 0:
                            exit_program(name)  # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                except ValueError:
                    print(f'\n‚ùó{name}, –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: ')
                    all_ok_position = False
        else:
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö
            count_vak = input(f'–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö '
                              f'({size_dict_vak} —à—Ç.) –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–≤–∏–¥–µ—Ç—å? ')

            all_ok = print_vacancies(service, count_vak, size_dict_vak, prof_print)
