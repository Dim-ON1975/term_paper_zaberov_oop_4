# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è utilities.py
import os

import pytest

from src.utils.utilities import loading_regions_hh, loading_regions_sj, user_name, exit_program, service_selection, \
    search_area_id, selection_menu_sections_id, num_area_word, all_ok_salary, all_ok_salary_input


def test_loading_regions_hh():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å —Å–µ—Ä–≤–∏—Å–∞ hh.ru.
    """

    path_vak_dir_hh = os.path.join('..', 'tests', 'data', 'hh', 'areas')
    path_are_hh = os.path.join('..', 'tests', 'data', 'hh', 'areas', 'test_areas.json')

    loading_regions_hh(path_vak_dir_hh=path_vak_dir_hh, path_are_hh=path_are_hh)

    # –°–æ–∑–¥–∞–≤–∞–µ–º—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ—Ç (bool).
    file_created = os.path.exists(path_are_hh)

    assert file_created is True

    # –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
    file_size = os.path.getsize(path_are_hh)

    assert file_size > 0

    # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    with pytest.raises(Exception) as exif:
        url = ''
        loading_regions_hh(url=url, path_vak_dir_hh=path_vak_dir_hh, path_are_hh=path_are_hh)
    assert f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å {url}.' in str(exif.value)

    # –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
    with pytest.raises(Exception) as exif:
        path_vak_dir_hh = ''
        loading_regions_hh(url=url, path_vak_dir_hh=path_vak_dir_hh, path_are_hh=path_are_hh)
    assert f'–°–∏—Å—Ç–µ–º–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å' in str(exif.value)


def test_loading_regions_sj():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å —Å–µ—Ä–≤–∏—Å–∞ superjob.ru.
    """

    path_vak_dir_sj = os.path.join('..', 'tests', 'data', 'sj', 'areas')
    path_are_sj = os.path.join('..', 'tests', 'data', 'sj', 'areas', 'test_areas.json')

    loading_regions_sj(path_vak_dir_sj=path_vak_dir_sj, path_are_sj=path_are_sj)

    # –°–æ–∑–¥–∞–≤–∞–µ–º—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ—Ç (bool).
    file_created = os.path.exists(path_are_sj)

    assert file_created is True

    # –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
    file_size = os.path.getsize(path_are_sj)

    assert file_size > 0

    # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    with pytest.raises(Exception) as exif:
        url = ''
        loading_regions_sj(url=url, path_vak_dir_sj=path_vak_dir_sj, path_are_sj=path_are_sj)
    assert f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å {url}.' in str(exif.value)

    # –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
    with pytest.raises(Exception) as exif:
        path_vak_dir_sj = ''
        loading_regions_sj(url=url, path_vak_dir_sj=path_vak_dir_sj, path_are_sj=path_are_sj)
    assert f'–°–∏—Å—Ç–µ–º–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å' in str(exif.value)


@pytest.mark.parametrize("name, result", [
    ('–í–∞—Å–∏–ª–∏–π', '–í–∞—Å–∏–ª–∏–π'),
    ('Mary', 'Mary'),
    ('', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
])
def test_user_name(name, result, capsys):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –Ω–∏–º.
    """
    assert user_name(name) == result
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É pytest - capsys builtin,
    # –∫–æ—Ç–æ—Ä–∞—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    # –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å stdout –∏ stderr –∏–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –∫–æ–¥–∞,
    # –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—Ö–≤–∞—Ç –≤—ã–≤–æ–¥–∞ (print).
    out, err = capsys.readouterr()
    if name != '':
        assert out == f'–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {result}. ü§ù\n\n'
        assert err == ''
    else:
        assert out == f'–•–æ—Ä–æ—à–æ, –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å –í–∞—Å {result}. üëå\n\n'
        assert err == ''


@pytest.mark.parametrize("name", [
    '–í–∞—Å–∏–ª–∏–π',
    'Mary',
    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
])
def test_exit_program(name, capsys):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    with pytest.raises(SystemExit) as exif:
        exit_program(name)
        out, err = capsys.readouterr()
        assert out == f'\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {name}! üëã'
        assert err == ''
    assert "–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞." in str(exif.value)


@pytest.mark.parametrize("name, num_vak, result", [
    ('–í–∞—Å–∏–ª–∏–π', '1', 1),
    ('–í–∞—Å–∏–ª–∏–π', '2', 2),
    ('–í–∞—Å–∏–ª–∏–π', '0', "–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞."),
])
def test_service_selection_1(name, num_vak, result, capsys):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤–∞–∫–∞–Ω—Å–∏–π.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç: 1, 2 –∏–ª–∏ 0.
    """
    if num_vak == '1' or num_vak == '2':
        num_vak = service_selection(name, num_vak)
        assert num_vak == result
    elif num_vak == '0':
        with pytest.raises(SystemExit) as exif:
            service_selection(name, num_vak)
            out, err = capsys.readouterr()
            assert out == f'\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {name}! üëã'
            assert err == ''
        assert result in str(exif.value)


def test_service_selection_2(capsys, monkeypatch):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤–∞–∫–∞–Ω—Å–∏–π.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    """

    # inputs
    user_inputs = iter(['–µ', '5', 'x'])
    # expected
    prompt_expected = ""
    # Monkey patching
    monkeypatch.setattr('builtins.input', lambda _: next(user_inputs))
    service_selection('–í–∞—Å–∏–ª–∏–π', next(user_inputs))
    out, err = capsys.readouterr()
    assert out == prompt_expected


@pytest.mark.parametrize("service, name, area_vak, result", [
    ('hh', '–í–∞—Å–∏–ª–∏–π', '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 1530),
    ('hh', '–í–∞—Å–∏–ª–∏–π', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', 76),
    ('hh', '–í–∞—Å–∏–ª–∏–π', 'error', 113),
    ('sj', '–í–∞—Å–∏–ª–∏–π', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', 73),
    ('sj', '–í–∞—Å–∏–ª–∏–π', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 14),
    ('sj', '–í–∞—Å–∏–ª–∏–π', 'error', 1),
])
def test_choosing_region(service, name, area_vak, result, capsys, monkeypatch):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ id —Ä–µ–≥–∏–æ–Ω–∞/–Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
    """

    test_id = search_area_id(area_vak, service, name)

    assert test_id == result


@pytest.mark.parametrize("num_area, name, result", [
    ('1', '–í–∞—Å–∏–ª–∏–π', (True, False)),
    ('2', '–í–∞—Å–∏–ª–∏–π', (True, True)),
    ('0', '–í–∞—Å–∏–ª–∏–π', '–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'),
    ('error', '–í–∞—Å–∏–ª–∏–π', (False, False))
])
def test_selection_menu_sections_id(num_area, name, result, capsys):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –¥–ª—è –ø–æ–∏—Å–∫–∞ id —Ä–µ–≥–∏–æ–Ω–∞/–Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.
    """
    if num_area == '1' or num_area == '2':
        all_ok_area, all_ok = selection_menu_sections_id(num_area, name)
        assert all_ok_area == result[0]
        assert all_ok == result[1]
    elif num_area == '0':
        with pytest.raises(SystemExit) as exif:
            selection_menu_sections_id(num_area, name)
            out, err = capsys.readouterr()
            assert out == f'\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {name}! üëã'
            assert err == ''
        assert result in str(exif.value)
    else:
        all_ok_area, all_ok = selection_menu_sections_id(num_area, name)
        out, err = capsys.readouterr()
        assert out == '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n'
        assert err == ''
        assert all_ok_area is False
        assert all_ok is False


@pytest.mark.parametrize("salary_vak, name, result", [
    ('1', '–í–∞—Å–∏–ª–∏–π', (True, True)),
    ('2', '–í–∞—Å–∏–ª–∏–π', (False, True)),
    ('0', '–í–∞—Å–∏–ª–∏–π', '–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'),
    ('error', '–í–∞—Å–∏–ª–∏–π', (False, False))
])
def test_all_ok_salary(salary_vak, name, result, capsys):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–π —Ç–æ–ª—å–∫–æ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –∏–ª–∏ –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è.
    """
    if salary_vak == '1' or salary_vak == '2':
        only_with_salary, all_ok = all_ok_salary(salary_vak, name)
        assert only_with_salary == result[0]
        assert all_ok == result[1]
    elif salary_vak == '0':
        with pytest.raises(SystemExit) as exif:
            all_ok_salary(salary_vak, name)
            out, err = capsys.readouterr()
            assert out == f'\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {name}! üëã'
            assert err == ''
        assert result in str(exif.value)
    else:
        only_with_salary, all_ok = all_ok_salary(salary_vak, name)
        out, err = capsys.readouterr()
        assert out == '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n'
        assert err == ''
        assert only_with_salary is False
        assert all_ok is False


@pytest.mark.parametrize("salary, result", [
    ('50000', (50000, True)),
    ('100000', (100000, True)),
    ('0', (0, False)),
    ('-5', (0, False)),
    ('error', (0, False))
])
def test_all_ok_salary_input(salary, result, capsys):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–π —Ç–æ–ª—å–∫–æ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –∏–ª–∏ –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è.
    """
    try:
        if isinstance(int(salary), int):
            salary, all_ok = all_ok_salary_input(salary)
            assert salary == result[0]
            assert all_ok == result[1]
    except ValueError:
        salary, all_ok = all_ok_salary_input(salary)
        out, err = capsys.readouterr()
        assert out == '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.\n'
        assert err == ''
        assert salary == result[0]
        assert all_ok == result[1]
