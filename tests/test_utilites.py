# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è utilites.py
import os

import pytest

from src.utils.utilites import loading_regions_hh, loading_regions_sj, user_name, exit_program


def test_loading_regions_hh():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å —Å–µ—Ä–≤–∏—Å–∞ hh.ru.
    """

    path_vak_dir_hh = os.path.join('..', 'tests', 'data', 'hh', 'areas')
    path_are_hh = os.path.join('..', 'tests', 'data', 'hh', 'areas', 'test_areas.json')

    loading_regions_hh(path_vak_dir_hh=path_vak_dir_hh, path_are_hh=path_are_hh)

    # –°–æ–∑–¥–∞–≤–∞–µ–º—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ—Ç (bool).
    file_created = os.path.exists(path_are_hh)

    assert file_created is True

    # –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
    file_size = os.path.getsize(path_are_hh)

    assert file_size > 0


def test_loading_regions_sj():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤/–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å —Å–µ—Ä–≤–∏—Å–∞ superjob.ru.
    """

    path_vak_dir_sj = os.path.join('..', 'tests', 'data', 'sj', 'areas')
    path_are_sj = os.path.join('..', 'tests', 'data', 'sj', 'areas', 'test_areas.json')

    loading_regions_sj(path_vak_dir_sj=path_vak_dir_sj, path_are_sj=path_are_sj)

    # –°–æ–∑–¥–∞–≤–∞–µ–º—ã–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ—Ç (bool).
    file_created = os.path.exists(path_are_sj)

    assert file_created is True

    # –°–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
    file_size = os.path.getsize(path_are_sj)

    assert file_size > 0


@pytest.mark.parametrize("name, result", [
    ('–í–∞—Å–∏–ª–∏–π', '–í–∞—Å–∏–ª–∏–π'),
    ('Mary', 'Mary'),
    ('', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
])
def test_user_name(name, result, capsys):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –Ω–∏–º.
    """
    assert user_name(name) == result
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—É pytest - capsys builtin,
    # –∫–æ—Ç–æ—Ä–∞—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    # –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å stdout –∏ stderr –∏–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –∫–æ–¥–∞,
    # –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞—Ö–≤–∞—Ç –≤—ã–≤–æ–¥–∞ (print).
    out, err = capsys.readouterr()
    if name != '':
        assert out == f'–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {result}. ü§ù\n\n'
        assert err == ''
    else:
        assert out == f'–•–æ—Ä–æ—à–æ, –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å –í–∞—Å {result}. üëå\n\n'
        assert err == ''


@pytest.mark.parametrize("name", [
    '–í–∞—Å–∏–ª–∏–π',
    'Mary',
    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
])
def test_exit_program(name, capsys):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    with pytest.raises(SystemExit) as exif:
        exit_program(name)
        out, err = capsys.readouterr()
        assert out == f'\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {name}! üëã'
        assert err == ''
    assert "–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞." in str(exif.value)
